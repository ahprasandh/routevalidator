"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SecurityErrorCode = require("./SecurityErrorCode");

var _SecurityErrorCode2 = _interopRequireDefault(_SecurityErrorCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SecurityError extends Error {
  constructor(errorCode, data, ...params) {
    super(...params);

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, SecurityError);
    } // Custom debugging information


    if (!_SecurityErrorCode2.default[errorCode]) {
      errorCode = "RV_INTERNAL_1";
    }

    this.errorCode = errorCode;
    this.status = _SecurityErrorCode2.default[errorCode][0];
    this.message = _SecurityErrorCode2.default[errorCode][1];

    if (_SecurityErrorCode2.default[errorCode][2]) {
      for (var i in _SecurityErrorCode2.default[errorCode][2]) {
        console.log(i);

        var toGet = _SecurityErrorCode2.default[errorCode][2][i].split('|');

        var printData = null;
        var printKey = null;

        for (var j in toGet) {
          printKey = toGet[j];

          if (printData) {
            printData = printData[printKey];
          } else {
            printData = data[printKey];
          }
        }

        this.message += ' [' + printKey + ' : ' + printData + ']';
      }
    }

    this.date = new Date();
  }

}

exports.default = SecurityError;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Object.freeze({
  "RV_INTERNAL_1": [500, "Internal Server Error"],
  "RV_URL_404": [404, "RouteValidationError:URL rule not configured for the url", ['url']],
  "RV_AUTH_401": [401, "RouteValidationError: Unauthorized"],
  "RV_PARAM_4001": [400, "RouteValidationError: Configured Param value does not match", ['param', 'value', 'regex']],
  "RV_PARAM_4002": [400, "RouteValidationError: Mandatory param missing", ['param']],
  "RV_PARAM_4003": [400, "RouteValidationError: Param length greater than configured length", ['param', 'length']],
  "RV_PARAM_4004": [400, "RouteValidationError: Param length lesser than configured length", ['param', 'length']],
  "RV_PARAM_4005": [400, "RouteValidationError: Param value does not match loaded regex", ['param', 'value', 'regex']],
  "RV_PARAM_4006": [400, "RouteValidationError: Extra param found", ['param', 'value']]
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeValidator = routeValidator;
exports.initSessionVariables = initSessionVariables;
exports.initRules = initRules;

var _SecurityError = require("./SecurityError");

var _SecurityError2 = _interopRequireDefault(_SecurityError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let securityRules = null;
let sessionKey = "";
let sessionVariable = "";

const hasRuleConfigured = wrapper => {
  return new Promise((resolve, reject) => {
    let matchedRule = null;
    var realUrl = wrapper.req.originalUrl.split("?")[0];

    for (var rule in securityRules.urls) {
      var regex = new RegExp("^" + rule.replace("/", "\/") + "$"); // console.log(regex.test(realUrl) + " |-url- " + realUrl + "|-rule- " + regex);

      if (regex.test(realUrl)) {
        matchedRule = securityRules.urls[rule];
        break;
      }
    }

    if (matchedRule && matchedRule.methods[wrapper.req.method]) {
      matchedRule.rule = realUrl;
      wrapper.rule = matchedRule;
      resolve(wrapper);
    } else {
      reject(new _SecurityError2.default("RV_URL_404", {
        url: wrapper.req.originalUrl
      }));
    }
  });
};

const checkParamPattern = wrapper => {
  var methodRule = wrapper.rule.methods[wrapper.req.method];

  if (methodRule.params && Object.keys(methodRule.params).length > 0 && Object.keys(wrapper.req.body).length > 0) {
    // console.log(wrapper.req.get("Content-Type"));
    // console.log(wrapper.req.body);
    var reqParams = wrapper.req.body;

    for (var param in reqParams) {
      if (!methodRule.params[param]) {
        return Promise.reject(new _SecurityError2.default("RV_PARAM_4006", {
          param: param,
          value: reqParams[param]
        }));
      }
    }

    for (var param in methodRule.params) {
      var configuration = methodRule.params[param];

      if (configuration.mandatory && !reqParams[param]) {
        return Promise.reject(new _SecurityError2.default("RV_PARAM_4002", {
          param: param
        }));
      }

      if (reqParams[param]) {
        var paramValue = reqParams[param];

        if (configuration.minLength && paramValue.length < configuration.minLength) {
          return Promise.reject(new _SecurityError2.default("RV_PARAM_4004", {
            param: param,
            length: configuration.minLength
          }));
        }

        if (configuration.maxLength && paramValue.length > configuration.maxLength) {
          return Promise.reject(new _SecurityError2.default("RV_PARAM_4003", {
            param: param,
            length: configuration.maxLength
          }));
        }

        if (configuration.regex && !new RegExp("^" + configuration.regex + "$").test(paramValue)) {
          return Promise.reject(new _SecurityError2.default("RV_PARAM_4005", {
            param: param,
            value: paramValue,
            regex: configuration.regex
          }));
        }
      }
    }
  }

  return Promise.resolve(wrapper);
};

const checkAuthentication = wrapper => {
  let rule = wrapper.rule;
  let req = wrapper.req;

  if (rule.authentication) {
    if (req.session[sessionVariable] && req.cookies[sessionKey]) {
      return Promise.resolve(wrapper);
    } else {
      return Promise.reject(new _SecurityError2.default("RV_AUTH_401"));
    }
  } else {
    return Promise.resolve(wrapper);
  }
};

function routeValidator(req, res, next) {
  let routerWrapper = {
    req: req,
    res: res
  };
  hasRuleConfigured(routerWrapper).then(checkParamPattern).then(checkAuthentication).then(wrapper => {
    next();
  }).catch(err => {
    next(err);
  });
}

;

function initSessionVariables(conf) {
  sessionKey = conf.sessionKey;
  sessionVariable = conf.sessionVariable;
}

function initRules(rules) {
  if (!securityRules) {
    securityRules = rules;
  } else {
    for (var rule in rules.urls) {
      securityRules.urls[rule] = rules.urls[rule];
    }
  }
}
